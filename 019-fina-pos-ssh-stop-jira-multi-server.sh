# Code Generated by Sidekick is for learning and experimentation purposes only. 

# Define variables
$servers = @(
    @{ Server = "app25ffff01.com"; Username = "app25ffff01.com"; Password = "app25ffff01.com0R_np" },
    @{ Server = "app25ffff01.com"; Username = "aapp25ffff01.com.com"; Password = "app25ffff01.comp" }
    # Add more servers as needed
)
$jiraService = "jira"

# Function to run a command via SSH
function Run-SSHCommand($sshSession, $command) {
    try {
        $result = Invoke-SSHCommand -SessionId $sshSession.SessionId -Command $command
        return $result.Output
    } catch {
        Write-Error "Error occurred while executing command: $_"
        return $null
    }
}

# Function to check Jira status
function Check-JiraStatus($sshSession) {
    $statusCommand = "sudo systemctl is-active $jiraService"
    return Run-SSHCommand $sshSession $statusCommand
}

# Function to kill Java processes
function Kill-JavaProcesses($sshSession) {
    $killCommand = "sudo pkill -f java"
    Run-SSHCommand $sshSession $killCommand
}

# Stop Jira service on multiple servers
foreach ($serverInfo in $servers) {
    $server = $serverInfo.Server
    $username = $serverInfo.Username
    $password = $serverInfo.Password

    try {
        $sshSession = New-SSHSession -ComputerName $server -Credential (New-Object PSCredential($username, (ConvertTo-SecureString $password -AsPlainText -Force)))
        Write-Output "SSH session secured successfully for $server."
    } catch {
        Write-Error "Failed to establish SSH session for $server."
        continue
    }

    $stopResult = Run-SSHCommand $sshSession "sudo systemctl stop $jiraService"

    if ($stopResult -eq $null) {
        Write-Output "Skipping further checks for $server due to command execution failure."
        Remove-SSHSession -SessionId $sshSession.SessionId
        continue
    }

    # Check Jira status 3-4 times with 5 seconds interval
    for ($i = 1; $i -le 4; $i++) {
        $status = Check-JiraStatus($sshSession)
        if ($status -eq "failed") {
            Write-Output "Jira has been successfully stopped on $server."
            break
        } elseif ($status -eq "active") {
            Write-Output "Jira is still running on $server. Attempt $i of 4."
        } else {
            Write-Output "Unexpected status on $server : $status. Please check Jira manually."
            break
        }
        Start-Sleep -Seconds 5
    }

    # If Jira still cannot be stopped, kill Java processes
    if ($status -eq "active") {
        Write-Output "Could not stop Jira on $server after multiple attempts. Attempting to kill Java processes..."
        Kill-JavaProcesses $sshSession

        # Attempt to stop Jira again
        $stopResult = Run-SSHCommand $sshSession "sudo systemctl stop $jiraService"

        # Check Jira status again
        for ($i = 1; $i -le 4; $i++) {
            $status = Check-JiraStatus($sshSession)
            if ($status -eq "failed") {
                Write-Output "Jira has been successfully stopped on $server after killing Java processes."
                break
            } elseif ($status -eq "active") {
                Write-Output "Jira is still running on $server after killing Java processes. Attempt $i of 4."
            } else {
                Write-Output "Unexpected status on $server : $status. Please check Jira manually."
                break
            }
            Start-Sleep -Seconds 5
        }

        # If Jira still cannot be stopped
        if ($status -eq "active") {
            Write-Output "Could not stop Jira on $server after multiple attempts, even after killing Java processes. Please check manually."
        }
    }

    Remove-SSHSession -SessionId $sshSession.SessionId
}

Write-Output "Jira stop process completed on all servers."
exit 0




################

This script will:

Iterate through a list of servers defined in the $servers array.
Establish an SSH session for each server and maintain it until all commands are executed.
Attempt to stop the Jira service on each server using sudo systemctl stop jira.
Print a message indicating the SSH session was secured successfully for each server.
Check the status of the Jira service up to 4 times with a 5-second interval between checks for each server.
If the status is failed, it will confirm that Jira has been successfully stopped on that server and move to the next server.
If the status is active, it will indicate that Jira is still running and retry.
If the status is anything else, it will throw an error, disconnect the SSH session, and exit with code 1.
If Jira cannot be stopped after multiple attempts, it will kill Java processes and try stopping Jira again.
If Jira still cannot be stopped after killing Java processes, it will throw an error, disconnect the SSH session, and exit with code 1.
If Jira is successfully stopped on all servers, it will print a success message and exit with code 0.

###################################

