#!/bin/bash
# Code Generated by Sidekick is for learning and experimentation purposes only. 

# Function to check Jira status
check_jira_status() {
    systemctl is-active jira
}

# Function to kill Java processes
kill_java_processes() {
    echo "Killing Java processes..."
    pkill -f java
}

# Stop Jira service
systemctl stop jira

# Check Jira status 3-4 times with 5 seconds interval
for i in {1..4}; do
    status=$(check_jira_status)
    if [ "$status" == "failed" ]; then
        echo "Jira has been successfully stopped."
        exit 0
    elif [ "$status" == "active" ]; then
        echo "Jira is still running. Attempt $i of 4."
    else
        echo "Unexpected status: $status. Please check Jira manually."
        exit 1
    fi
    sleep 5
done

# If the loop completes without stopping Jira, kill Java processes and try again
echo "Could not stop Jira after multiple attempts. Attempting to kill Java processes..."
kill_java_processes

# Attempt to stop Jira again
systemctl stop jira

# Check Jira status again
for i in {1..4}; do
    status=$(check_jira_status)
    if [ "$status" == "failed" ]; then
        echo "Jira has been successfully stopped after killing Java processes."
        exit 0
    elif [ "$status" == "active" ]; then
        echo "Jira is still running after killing Java processes. Attempt $i of 4."
    else
        echo "Unexpected status: $status. Please check Jira manually."
        exit 1
    fi
    sleep 5
done

# If Jira still cannot be stopped
echo "Could not stop Jira after multiple attempts, even after killing Java processes. Please check manually."
exit 1




#This script will:

#Attempt to stop the Jira service using systemctl stop jira.
#Check the status of the Jira service up to 4 times with a 5-second interval between checks.
#If the status is failed, it will confirm that Jira has been successfully stopped.
#If the status is active, it will indicate that Jira is still running and retry.
#If the status is anything else, it will throw an error and exit.
#If Jira cannot be stopped after multiple attempts, it will kill Java processes and try stopping Jira again.
#If Jira still cannot be stopped after killing Java processes, it will throw an error and exit
